const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

const BUILD_DIR = path.resolve(__dirname, '../../build');
const SW_FILE = path.resolve(BUILD_DIR, 'service-worker.js');

// ===== 1. –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ /build =====
function getAllFiles(dir, prefix = '/') {
  let results = [];
  const list = fs.readdirSync(dir);
  list.forEach((file) => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    if (stat && stat.isDirectory()) {
      results = results.concat(getAllFiles(filePath, path.join(prefix, file)));
    } else if (!filePath.endsWith('service-worker.js')) {
      results.push(path.join(prefix, file));
    }
  });
  return results;
}

const files = getAllFiles(BUILD_DIR);

// ===== 2. –°–æ–∑–¥–∞—ë–º —Ö—ç—à –≤–µ—Ä—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤ =====
const hash = crypto
  .createHash('sha256')
  .update(files.map(f => fs.readFileSync(path.join(BUILD_DIR, f))).join(''))
  .digest('hex')
  .substring(0, 12);

const CACHE_NAME = `rise-cache-${hash}`;

console.log(`üß© –°–æ–∑–¥–∞–Ω–∏–µ service worker (version: ${CACHE_NAME})`);
console.log(`üì¶ –§–∞–π–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–µ—à: ${files.length}`);

// ===== 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ SW =====
const swContent = `
// ===== Auto-generated by generate-sw.js =====
const CACHE_NAME = '${CACHE_NAME}';
const STATIC_ASSETS = ${JSON.stringify(files, null, 2)};

self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME).then((cache) => {
      console.log('[ServiceWorker] Caching', STATIC_ASSETS.length, 'files');
      return cache.addAll(STATIC_ASSETS);
    })
  );
  self.skipWaiting();
});

self.addEventListener('activate', (event) => {
  event.waitUntil(
    caches.keys().then((keys) => 
      Promise.all(
        keys
          .filter((key) => key.startsWith('rise-cache-') && key !== CACHE_NAME)
          .map((key) => {
            console.log('[ServiceWorker] Removing old cache', key);
            return caches.delete(key);
          })
      )
    )
  );
  self.clients.claim();
});

self.addEventListener('fetch', (event) => {
  if (event.request.method !== 'GET') return;

  const requestUrl = new URL(event.request.url);

  // –ù–µ –∫—ç—à–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ API –∏–ª–∏ Barba transitions
  if (requestUrl.pathname.startsWith('/api/') || requestUrl.searchParams.has('barba')) {
    return;
  }

  event.respondWith(
    caches.match(event.request).then((cachedResponse) => {
      const fetchPromise = fetch(event.request)
        .then((networkResponse) => {
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–ª—è HTML-—Å—Ç—Ä–∞–Ω–∏—Ü –∏ —Å—Ç–∞—Ç–∏–∫–∏
          if (
            networkResponse.ok &&
            (event.request.headers.get('accept')?.includes('text/html') ||
             event.request.destination === 'script' ||
             event.request.destination === 'style' ||
             event.request.destination === 'image')
          ) {
            caches.open(CACHE_NAME).then((cache) => {
              cache.put(event.request, networkResponse.clone());
            });
          }
          return networkResponse.clone();
        })
        .catch(() => cachedResponse);

      return cachedResponse || fetchPromise;
    })
  );
});
`;

// ===== 4. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª =====
fs.writeFileSync(SW_FILE, swContent);
console.log(`‚úÖ Service Worker —Å–æ–∑–¥–∞–Ω!`);
