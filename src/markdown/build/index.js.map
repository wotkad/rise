{"version":3,"sources":["../constructor/index.mts"],"names":["fs","markdown","html2pug","meta","docsPath","compiledPath","mkdir","readdir","err","files","forEach","file","content","readFileSync","use","renderedHtml","render","renderedPug","fragment","renderedFile","description","keywords","title","split","map","x","join","newFileName","replace","writeFileSync","document"],"mappings":"AAAA,OAAOA,EAAP,MAAe,UAAf;AACA,OAAOC,QAAP;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;;AAEA,CAAC,kBAAkB;AACjB,QAAMC,QAAQ,GAAG,sBAAjB;AACA,QAAMC,YAAY,GAAG,yBAArB;AACAL,EAAAA,EAAE,CAACM,KAAH,CAASD,YAAT;AACAL,EAAAA,EAAE,CAACO,OAAH,CAAWH,QAAX,EAAqB,CAACI,GAAD,EAAWC,KAAX,KAA0B;AAC7CA,IAAAA,KAAK,CAACC,OAAN,CAAeC,IAAD,IAAe;AAC3B,UAAIC,OAAO,GAAGZ,EAAE,CAACa,YAAH,CAAgBT,QAAQ,GAAGO,IAA3B,EAAiC,MAAjC,CAAd;AACAV,MAAAA,QAAQ,CAACa,GAAT,CAAaX,IAAb;AACA,UAAIY,YAAY,GAAGd,QAAQ,CAACe,MAAT,CAAgBJ,OAAhB,CAAnB;AACA,UAAIK,WAAW,GAAGf,QAAQ,CAACa,YAAD,EAAe;AAAEG,QAAAA,QAAQ,EAAE;AAAZ,OAAf,CAA1B;AACA,UAAIC,YAAY,GACb;AACT;AACA;AACA,qCAAqClB,QAAQ,CAACE,IAAT,CAAciB,WAAd,GAA4BnB,QAAQ,CAACE,IAAT,CAAciB,WAA1C,GAAwD,eAAgB;AAC7G,mCAAmCnB,QAAQ,CAACE,IAAT,CAAckB,QAAd,GAAyBpB,QAAQ,CAACE,IAAT,CAAckB,QAAvC,GAAkD,kBAAmB;AACxG;AACA;AACA;AACA;AACA;AACA;AACA,YAAYpB,QAAQ,CAACE,IAAT,CAAcmB,KAAd,GAAsBrB,QAAQ,CAACE,IAAT,CAAcmB,KAApC,GAA4C,uBAAwB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBApBQ,GAqBE,IArBF,GAqBSL,WAAW,CAACM,KAAZ,CAAkB,IAAlB,EAAwBC,GAAxB,CAA6BC,CAAD,IAAY,eAAeA,CAAvD,EAA0DC,IAA1D,CAA+D,IAA/D,CAtBX;AAuBA,UAAIC,WAAW,GAAGhB,IAAI,CAACiB,OAAL,CAAa,KAAb,EAAoB,MAApB,CAAlB;AACA5B,MAAAA,EAAE,CAAC6B,aAAH,CAAiBxB,YAAY,GAAGsB,WAAhC,EAA6CR,YAA7C,EAA2D,MAA3D;AACA,aAAO;AACLW,QAAAA,QAAQ,EAAEf,YADL;AAELZ,QAAAA,IAAI,EAAEF,QAAQ,CAACE;AAFV,OAAP;AAID,KAlCD;AAmCD,GApCD;AAqCD,CAzCD;;AA2CA","sourcesContent":["import fs from \"fs-extra\";\nimport markdown from \"./markdown.mjs\";\nimport html2pug from \"html2pug\";\nimport meta from \"markdown-it-meta\";\n\n(async function () {\n  const docsPath = './src/markdown/docs/';\n  const compiledPath = './src/views/pages/blog/';\n  fs.mkdir(compiledPath);\n  fs.readdir(docsPath, (err: any, files: any) => {\n    files.forEach((file: any) => {\n      let content = fs.readFileSync(docsPath + file, \"utf8\");\n      markdown.use(meta)\n      let renderedHtml = markdown.render(content);\n      let renderedPug = html2pug(renderedHtml, { fragment: true });\n      let renderedFile =\n        `extends ../../layouts/master.pug\n\nblock basicSeo\n  meta(name='description' content=\"${markdown.meta.description ? markdown.meta.description : \"Blog postpage\"}\")\n  meta(name='keywords', content=\"${markdown.meta.keywords ? markdown.meta.keywords : \"blog, page, post\"}\")\n\nblock manifestBrowserconfigFiles\n  link(href='../../manifest.json', rel='manifest')\n  meta(name='msapplication-config' content='../../browserconfig.xml')\n\nblock title\n    title ${markdown.meta.title ? markdown.meta.title : \"Страница без названия\"}\n\nblock content\n\n  +header('post')\n\n  .barba(data-barba=\"wrapper\")\n    main(data-barba=\"container\" data-barba-namespace=\"post\")\n      section\n        .wrapper`\n        + '\\n' + renderedPug.split('\\n').map((x: any) => '          ' + x).join('\\n');\n      let newFileName = file.replace('.md', '.pug');\n      fs.writeFileSync(compiledPath + newFileName, renderedFile, \"utf8\");\n      return {\n        document: renderedHtml,\n        meta: markdown.meta\n      }\n    });\n  });\n})();\n\nexport { }\n"],"file":"index.js"}